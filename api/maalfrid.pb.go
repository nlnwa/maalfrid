// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maalfrid.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Language codes in ISO 639-3:2007 format
type Code int32

const (
	Code_UND Code = 0
	Code_NOB Code = 1
	Code_NNO Code = 2
	Code_DAN Code = 3
	Code_SWE Code = 4
	Code_ENG Code = 5
	Code_FRA Code = 6
	Code_SMA Code = 7
	Code_SMJ Code = 8
	Code_SME Code = 9
	Code_ABK Code = 10
	Code_AAR Code = 11
	Code_AFR Code = 12
	Code_AKA Code = 13
	Code_SQI Code = 14
	Code_AMH Code = 15
	Code_ARA Code = 16
	Code_ARG Code = 17
	Code_HYE Code = 18
	Code_ASM Code = 19
	Code_AVA Code = 20
	Code_AVE Code = 21
	Code_AYM Code = 22
	Code_AZE Code = 23
	Code_BAM Code = 24
	Code_BAK Code = 25
	Code_EUS Code = 26
	Code_BEL Code = 27
	Code_BEN Code = 28
	Code_BER Code = 29
	Code_BIS Code = 30
	Code_BOS Code = 31
	Code_BRE Code = 32
	Code_BUL Code = 33
	Code_MYA Code = 34
	Code_CAT Code = 35
	Code_CHA Code = 36
	Code_CHE Code = 37
	Code_NYA Code = 38
	Code_ZHO Code = 39
	Code_CHV Code = 40
	Code_COR Code = 41
	Code_COS Code = 42
	Code_CRE Code = 43
	Code_HRV Code = 44
	Code_CES Code = 45
	Code_PRS Code = 46
	Code_DIV Code = 47
	Code_NLD Code = 48
	Code_DZO Code = 49
	Code_EPO Code = 50
	Code_EST Code = 51
	Code_EWE Code = 52
	Code_FAO Code = 53
	Code_FIJ Code = 54
	Code_FIN Code = 55
	Code_FUL Code = 56
	Code_GLG Code = 57
	Code_KAT Code = 58
	Code_DEU Code = 59
	Code_ELL Code = 60
	Code_GRN Code = 61
	Code_GUJ Code = 62
	Code_HAT Code = 63
	Code_HAU Code = 64
	Code_HEB Code = 65
	Code_HER Code = 66
	Code_HIN Code = 67
	Code_HMO Code = 68
	Code_HUN Code = 69
	Code_INA Code = 70
	Code_IND Code = 71
	Code_ILE Code = 72
	Code_GLE Code = 73
	Code_IBO Code = 74
	Code_IPK Code = 75
	Code_IDO Code = 76
	Code_ISL Code = 77
	Code_ITA Code = 78
	Code_IKU Code = 79
	Code_JPN Code = 80
	Code_JAV Code = 81
	Code_KAL Code = 82
	Code_KAN Code = 83
	Code_KAU Code = 84
	Code_KAS Code = 85
	Code_KAZ Code = 86
	Code_KHM Code = 87
	Code_KIK Code = 88
	Code_KIN Code = 89
	Code_KIR Code = 90
	Code_KOM Code = 91
	Code_KON Code = 92
	Code_KOR Code = 93
	Code_KUR Code = 94
	Code_KUA Code = 95
	Code_LAT Code = 96
	Code_LTZ Code = 97
	Code_LUG Code = 98
	Code_LIM Code = 99
	Code_LIN Code = 100
	Code_LAO Code = 101
	Code_LIT Code = 102
	Code_LUB Code = 103
	Code_LAV Code = 104
	Code_GLV Code = 105
	Code_MKD Code = 106
	Code_MLG Code = 107
	Code_MSA Code = 108
	Code_MAL Code = 109
	Code_MLT Code = 110
	Code_MRI Code = 111
	Code_MAR Code = 112
	Code_MAH Code = 113
	Code_MON Code = 114
	Code_NAU Code = 115
	Code_NAV Code = 116
	Code_NDE Code = 117
	Code_NSO Code = 118
	Code_NEP Code = 119
	Code_NDO Code = 120
	Code_NOR Code = 121
	Code_III Code = 122
	Code_NBL Code = 123
	Code_OCI Code = 124
	Code_OJI Code = 125
	Code_CHU Code = 126
	Code_ORM Code = 127
	Code_ORI Code = 128
	Code_OSS Code = 129
	Code_PAN Code = 130
	Code_PLI Code = 131
	Code_FAS Code = 132
	Code_POL Code = 133
	Code_PUS Code = 134
	Code_POR Code = 135
	Code_QUE Code = 136
	Code_ROH Code = 137
	Code_RUN Code = 138
	Code_RON Code = 139
	Code_RUS Code = 140
	Code_SAN Code = 141
	Code_SRD Code = 142
	Code_SND Code = 143
	Code_SMO Code = 144
	Code_SAG Code = 145
	Code_SRP Code = 146
	Code_GLA Code = 147
	Code_SNA Code = 148
	Code_SIN Code = 149
	Code_SLK Code = 150
	Code_SLV Code = 151
	Code_SOM Code = 152
	Code_SOT Code = 153
	Code_SPA Code = 154
	Code_SUN Code = 155
	Code_SWA Code = 156
	Code_SSW Code = 157
	Code_TAM Code = 158
	Code_TEL Code = 159
	Code_TGK Code = 160
	Code_THA Code = 161
	Code_TIR Code = 162
	Code_BOD Code = 163
	Code_TUK Code = 164
	Code_TGL Code = 165
	Code_FIL Code = 166
	Code_TSN Code = 167
	Code_TON Code = 168
	Code_TUR Code = 169
	Code_TSO Code = 170
	Code_TAT Code = 171
	Code_TWI Code = 172
	Code_TAH Code = 173
	Code_UIG Code = 174
	Code_UKR Code = 175
	Code_URD Code = 176
	Code_UZB Code = 177
	Code_VEN Code = 178
	Code_VIE Code = 179
	Code_VOL Code = 180
	Code_WLN Code = 181
	Code_CYM Code = 182
	Code_WOL Code = 183
	Code_FRY Code = 184
	Code_XHO Code = 185
	Code_YID Code = 186
	Code_YOR Code = 187
	Code_ZHA Code = 188
	Code_ZUL Code = 189
	Code_ACE Code = 190
	Code_ACH Code = 191
	Code_ADA Code = 192
	Code_ADY Code = 193
	Code_AFA Code = 194
	Code_AFH Code = 195
	Code_AIN Code = 196
	Code_AKK Code = 197
	Code_ALE Code = 198
	Code_ALG Code = 199
	Code_ALT Code = 200
	Code_ANG Code = 201
	Code_ANP Code = 202
	Code_APA Code = 203
	Code_ARC Code = 204
	Code_ARN Code = 205
	Code_ARP Code = 206
	Code_ART Code = 207
	Code_ARW Code = 208
	Code_AST Code = 209
	Code_ATH Code = 210
	Code_AUS Code = 211
	Code_AWA Code = 212
	Code_BAD Code = 213
	Code_BAI Code = 214
	Code_BAL Code = 215
	Code_BAN Code = 216
	Code_BAS Code = 217
	Code_BAT Code = 218
	Code_BEJ Code = 219
	Code_BEM Code = 220
	Code_BHO Code = 221
	Code_BIK Code = 222
	Code_BIN Code = 223
	Code_BLA Code = 224
	Code_BNT Code = 225
	Code_BRA Code = 226
	Code_BTK Code = 227
	Code_BUA Code = 228
	Code_BUG Code = 229
	Code_BYN Code = 230
	Code_CAD Code = 231
	Code_CAI Code = 232
	Code_CAR Code = 233
	Code_CAU Code = 234
	Code_CEB Code = 235
	Code_CEL Code = 236
	Code_CHB Code = 237
	Code_CHG Code = 238
	Code_CHK Code = 239
	Code_CHM Code = 240
	Code_CHN Code = 241
	Code_CHO Code = 242
	Code_CHP Code = 243
	Code_CHR Code = 244
	Code_CHY Code = 245
	Code_CMC Code = 246
	Code_COP Code = 247
	Code_CPE Code = 248
	Code_CPF Code = 249
	Code_CPP Code = 250
	Code_CRH Code = 251
	Code_CRP Code = 252
	Code_CSB Code = 253
	Code_CUS Code = 254
	Code_DAK Code = 255
	Code_DAR Code = 256
	Code_DAY Code = 257
	Code_DEL Code = 258
	Code_DEN Code = 259
	Code_DGR Code = 260
	Code_DIN Code = 261
	Code_DOI Code = 262
	Code_DRA Code = 263
	Code_DSB Code = 264
	Code_DUA Code = 265
	Code_DUM Code = 266
	Code_DYU Code = 267
	Code_EFI Code = 268
	Code_EGY Code = 269
	Code_EKA Code = 270
	Code_ELX Code = 271
	Code_ENM Code = 272
	Code_EWO Code = 273
	Code_FAN Code = 274
	Code_FAT Code = 275
	Code_FIU Code = 276
	Code_FON Code = 277
	Code_FRM Code = 278
	Code_FRO Code = 279
	Code_FRR Code = 280
	Code_FRS Code = 281
	Code_FUR Code = 282
	Code_GAA Code = 283
	Code_GAY Code = 284
	Code_GBA Code = 285
	Code_GEM Code = 286
	Code_GEZ Code = 287
	Code_GIL Code = 288
	Code_GMH Code = 289
	Code_GOH Code = 290
	Code_GON Code = 291
	Code_GOR Code = 292
	Code_GOT Code = 293
	Code_GRB Code = 294
	Code_GRC Code = 295
	Code_GSW Code = 296
	Code_GWI Code = 297
	Code_HAI Code = 298
	Code_HAW Code = 299
	Code_HIL Code = 300
	Code_HIM Code = 301
	Code_HIT Code = 302
	Code_HMN Code = 303
	Code_HSB Code = 304
	Code_HUP Code = 305
	Code_IBA Code = 306
	Code_IJO Code = 307
	Code_ILO Code = 308
	Code_INC Code = 309
	Code_INE Code = 310
	Code_INH Code = 311
	Code_IRA Code = 312
	Code_IRO Code = 313
	Code_JBO Code = 314
	Code_JPR Code = 315
	Code_JRB Code = 316
	Code_KAA Code = 317
	Code_KAB Code = 318
	Code_KAC Code = 319
	Code_KAM Code = 320
	Code_KAR Code = 321
	Code_KAW Code = 322
	Code_KBD Code = 323
	Code_KHA Code = 324
	Code_KHI Code = 325
	Code_KHO Code = 326
	Code_KMB Code = 327
	Code_KOK Code = 328
	Code_KOS Code = 329
	Code_KPE Code = 330
	Code_KRC Code = 331
	Code_KRL Code = 332
	Code_KRO Code = 333
	Code_KRU Code = 334
	Code_KUM Code = 335
	Code_KUT Code = 336
	Code_LAD Code = 337
	Code_LAH Code = 338
	Code_LAM Code = 339
	Code_LEZ Code = 340
	Code_LOL Code = 341
	Code_LOZ Code = 342
	Code_LUA Code = 343
	Code_LUI Code = 344
	Code_LUN Code = 345
	Code_LUO Code = 346
	Code_LUS Code = 347
	Code_MAD Code = 348
	Code_MAG Code = 349
	Code_MAI Code = 350
	Code_MAK Code = 351
	Code_MAN Code = 352
	Code_MAP Code = 353
	Code_MAS Code = 354
	Code_MDF Code = 355
	Code_MDR Code = 356
	Code_MEN Code = 357
	Code_MGA Code = 358
	Code_MIC Code = 359
	Code_MIN Code = 360
	Code_MIS Code = 361
	Code_MKH Code = 362
	Code_MNC Code = 363
	Code_MNI Code = 364
	Code_MNO Code = 365
	Code_MOH Code = 366
	Code_MOS Code = 367
	Code_MUL Code = 368
	Code_MUN Code = 369
	Code_MUS Code = 370
	Code_MWL Code = 371
	Code_MWR Code = 372
	Code_MYN Code = 373
	Code_MYV Code = 374
	Code_NAH Code = 375
	Code_NAI Code = 376
	Code_NAP Code = 377
	Code_NDS Code = 378
	Code_NEW Code = 379
	Code_NIA Code = 380
	Code_NIC Code = 381
	Code_NIU Code = 382
	Code_NOG Code = 383
	Code_NON Code = 384
	Code_NQO Code = 385
	Code_NUB Code = 386
	Code_NWC Code = 387
	Code_NYM Code = 388
	Code_NYN Code = 389
	Code_NYO Code = 390
	Code_NZI Code = 391
	Code_OSA Code = 392
	Code_OTA Code = 393
	Code_OTO Code = 394
	Code_PAA Code = 395
	Code_PAG Code = 396
	Code_PAL Code = 397
	Code_PAM Code = 398
	Code_PAP Code = 399
	Code_PAU Code = 400
	Code_PEO Code = 401
	Code_PHI Code = 402
	Code_PHN Code = 403
	Code_PON Code = 404
	Code_PRA Code = 405
	Code_PRO Code = 406
	Code_RAJ Code = 407
	Code_RAP Code = 408
	Code_RAR Code = 409
	Code_ROA Code = 410
	Code_ROM Code = 411
	Code_RUP Code = 412
	Code_SAD Code = 413
	Code_SAH Code = 414
	Code_SAI Code = 415
	Code_SAL Code = 416
	Code_SAM Code = 417
	Code_SAS Code = 418
	Code_SAT Code = 419
	Code_SCN Code = 420
	Code_SCO Code = 421
	Code_SEL Code = 422
	Code_SEM Code = 423
	Code_SGA Code = 424
	Code_SGN Code = 425
	Code_SHN Code = 426
	Code_SID Code = 427
	Code_SIO Code = 428
	Code_SIT Code = 429
	Code_SLA Code = 430
	Code_SMI Code = 431
	Code_SMN Code = 432
	Code_SMS Code = 433
	Code_SNK Code = 434
	Code_SOG Code = 435
	Code_SON Code = 436
	Code_SRN Code = 437
	Code_SRR Code = 438
	Code_SSA Code = 439
	Code_SUK Code = 440
	Code_SUS Code = 441
	Code_SUX Code = 442
	Code_SYC Code = 443
	Code_SYR Code = 444
	Code_TAI Code = 445
	Code_TEM Code = 446
	Code_TER Code = 447
	Code_TET Code = 448
	Code_TIG Code = 449
	Code_TIV Code = 450
	Code_TKL Code = 451
	Code_TLH Code = 452
	Code_TLI Code = 453
	Code_TMH Code = 454
	Code_TOG Code = 455
	Code_TPI Code = 456
	Code_TSI Code = 457
	Code_TUM Code = 458
	Code_TUP Code = 459
	Code_TUT Code = 460
	Code_TVL Code = 461
	Code_TYV Code = 462
	Code_UDM Code = 463
	Code_UGA Code = 464
	Code_UMB Code = 465
	Code_VAI Code = 466
	Code_VOT Code = 467
	Code_WAK Code = 468
	Code_WAL Code = 469
	Code_WAR Code = 470
	Code_WAS Code = 471
	Code_WEN Code = 472
	Code_XAL Code = 473
	Code_YAO Code = 474
	Code_YAP Code = 475
	Code_YPK Code = 476
	Code_ZAP Code = 477
	Code_ZBL Code = 478
	Code_ZEN Code = 479
	Code_ZGH Code = 480
	Code_ZND Code = 481
	Code_ZUN Code = 482
	Code_ZXX Code = 483
	Code_ZZA Code = 484
)

var Code_name = map[int32]string{
	0:   "UND",
	1:   "NOB",
	2:   "NNO",
	3:   "DAN",
	4:   "SWE",
	5:   "ENG",
	6:   "FRA",
	7:   "SMA",
	8:   "SMJ",
	9:   "SME",
	10:  "ABK",
	11:  "AAR",
	12:  "AFR",
	13:  "AKA",
	14:  "SQI",
	15:  "AMH",
	16:  "ARA",
	17:  "ARG",
	18:  "HYE",
	19:  "ASM",
	20:  "AVA",
	21:  "AVE",
	22:  "AYM",
	23:  "AZE",
	24:  "BAM",
	25:  "BAK",
	26:  "EUS",
	27:  "BEL",
	28:  "BEN",
	29:  "BER",
	30:  "BIS",
	31:  "BOS",
	32:  "BRE",
	33:  "BUL",
	34:  "MYA",
	35:  "CAT",
	36:  "CHA",
	37:  "CHE",
	38:  "NYA",
	39:  "ZHO",
	40:  "CHV",
	41:  "COR",
	42:  "COS",
	43:  "CRE",
	44:  "HRV",
	45:  "CES",
	46:  "PRS",
	47:  "DIV",
	48:  "NLD",
	49:  "DZO",
	50:  "EPO",
	51:  "EST",
	52:  "EWE",
	53:  "FAO",
	54:  "FIJ",
	55:  "FIN",
	56:  "FUL",
	57:  "GLG",
	58:  "KAT",
	59:  "DEU",
	60:  "ELL",
	61:  "GRN",
	62:  "GUJ",
	63:  "HAT",
	64:  "HAU",
	65:  "HEB",
	66:  "HER",
	67:  "HIN",
	68:  "HMO",
	69:  "HUN",
	70:  "INA",
	71:  "IND",
	72:  "ILE",
	73:  "GLE",
	74:  "IBO",
	75:  "IPK",
	76:  "IDO",
	77:  "ISL",
	78:  "ITA",
	79:  "IKU",
	80:  "JPN",
	81:  "JAV",
	82:  "KAL",
	83:  "KAN",
	84:  "KAU",
	85:  "KAS",
	86:  "KAZ",
	87:  "KHM",
	88:  "KIK",
	89:  "KIN",
	90:  "KIR",
	91:  "KOM",
	92:  "KON",
	93:  "KOR",
	94:  "KUR",
	95:  "KUA",
	96:  "LAT",
	97:  "LTZ",
	98:  "LUG",
	99:  "LIM",
	100: "LIN",
	101: "LAO",
	102: "LIT",
	103: "LUB",
	104: "LAV",
	105: "GLV",
	106: "MKD",
	107: "MLG",
	108: "MSA",
	109: "MAL",
	110: "MLT",
	111: "MRI",
	112: "MAR",
	113: "MAH",
	114: "MON",
	115: "NAU",
	116: "NAV",
	117: "NDE",
	118: "NSO",
	119: "NEP",
	120: "NDO",
	121: "NOR",
	122: "III",
	123: "NBL",
	124: "OCI",
	125: "OJI",
	126: "CHU",
	127: "ORM",
	128: "ORI",
	129: "OSS",
	130: "PAN",
	131: "PLI",
	132: "FAS",
	133: "POL",
	134: "PUS",
	135: "POR",
	136: "QUE",
	137: "ROH",
	138: "RUN",
	139: "RON",
	140: "RUS",
	141: "SAN",
	142: "SRD",
	143: "SND",
	144: "SMO",
	145: "SAG",
	146: "SRP",
	147: "GLA",
	148: "SNA",
	149: "SIN",
	150: "SLK",
	151: "SLV",
	152: "SOM",
	153: "SOT",
	154: "SPA",
	155: "SUN",
	156: "SWA",
	157: "SSW",
	158: "TAM",
	159: "TEL",
	160: "TGK",
	161: "THA",
	162: "TIR",
	163: "BOD",
	164: "TUK",
	165: "TGL",
	166: "FIL",
	167: "TSN",
	168: "TON",
	169: "TUR",
	170: "TSO",
	171: "TAT",
	172: "TWI",
	173: "TAH",
	174: "UIG",
	175: "UKR",
	176: "URD",
	177: "UZB",
	178: "VEN",
	179: "VIE",
	180: "VOL",
	181: "WLN",
	182: "CYM",
	183: "WOL",
	184: "FRY",
	185: "XHO",
	186: "YID",
	187: "YOR",
	188: "ZHA",
	189: "ZUL",
	190: "ACE",
	191: "ACH",
	192: "ADA",
	193: "ADY",
	194: "AFA",
	195: "AFH",
	196: "AIN",
	197: "AKK",
	198: "ALE",
	199: "ALG",
	200: "ALT",
	201: "ANG",
	202: "ANP",
	203: "APA",
	204: "ARC",
	205: "ARN",
	206: "ARP",
	207: "ART",
	208: "ARW",
	209: "AST",
	210: "ATH",
	211: "AUS",
	212: "AWA",
	213: "BAD",
	214: "BAI",
	215: "BAL",
	216: "BAN",
	217: "BAS",
	218: "BAT",
	219: "BEJ",
	220: "BEM",
	221: "BHO",
	222: "BIK",
	223: "BIN",
	224: "BLA",
	225: "BNT",
	226: "BRA",
	227: "BTK",
	228: "BUA",
	229: "BUG",
	230: "BYN",
	231: "CAD",
	232: "CAI",
	233: "CAR",
	234: "CAU",
	235: "CEB",
	236: "CEL",
	237: "CHB",
	238: "CHG",
	239: "CHK",
	240: "CHM",
	241: "CHN",
	242: "CHO",
	243: "CHP",
	244: "CHR",
	245: "CHY",
	246: "CMC",
	247: "COP",
	248: "CPE",
	249: "CPF",
	250: "CPP",
	251: "CRH",
	252: "CRP",
	253: "CSB",
	254: "CUS",
	255: "DAK",
	256: "DAR",
	257: "DAY",
	258: "DEL",
	259: "DEN",
	260: "DGR",
	261: "DIN",
	262: "DOI",
	263: "DRA",
	264: "DSB",
	265: "DUA",
	266: "DUM",
	267: "DYU",
	268: "EFI",
	269: "EGY",
	270: "EKA",
	271: "ELX",
	272: "ENM",
	273: "EWO",
	274: "FAN",
	275: "FAT",
	276: "FIU",
	277: "FON",
	278: "FRM",
	279: "FRO",
	280: "FRR",
	281: "FRS",
	282: "FUR",
	283: "GAA",
	284: "GAY",
	285: "GBA",
	286: "GEM",
	287: "GEZ",
	288: "GIL",
	289: "GMH",
	290: "GOH",
	291: "GON",
	292: "GOR",
	293: "GOT",
	294: "GRB",
	295: "GRC",
	296: "GSW",
	297: "GWI",
	298: "HAI",
	299: "HAW",
	300: "HIL",
	301: "HIM",
	302: "HIT",
	303: "HMN",
	304: "HSB",
	305: "HUP",
	306: "IBA",
	307: "IJO",
	308: "ILO",
	309: "INC",
	310: "INE",
	311: "INH",
	312: "IRA",
	313: "IRO",
	314: "JBO",
	315: "JPR",
	316: "JRB",
	317: "KAA",
	318: "KAB",
	319: "KAC",
	320: "KAM",
	321: "KAR",
	322: "KAW",
	323: "KBD",
	324: "KHA",
	325: "KHI",
	326: "KHO",
	327: "KMB",
	328: "KOK",
	329: "KOS",
	330: "KPE",
	331: "KRC",
	332: "KRL",
	333: "KRO",
	334: "KRU",
	335: "KUM",
	336: "KUT",
	337: "LAD",
	338: "LAH",
	339: "LAM",
	340: "LEZ",
	341: "LOL",
	342: "LOZ",
	343: "LUA",
	344: "LUI",
	345: "LUN",
	346: "LUO",
	347: "LUS",
	348: "MAD",
	349: "MAG",
	350: "MAI",
	351: "MAK",
	352: "MAN",
	353: "MAP",
	354: "MAS",
	355: "MDF",
	356: "MDR",
	357: "MEN",
	358: "MGA",
	359: "MIC",
	360: "MIN",
	361: "MIS",
	362: "MKH",
	363: "MNC",
	364: "MNI",
	365: "MNO",
	366: "MOH",
	367: "MOS",
	368: "MUL",
	369: "MUN",
	370: "MUS",
	371: "MWL",
	372: "MWR",
	373: "MYN",
	374: "MYV",
	375: "NAH",
	376: "NAI",
	377: "NAP",
	378: "NDS",
	379: "NEW",
	380: "NIA",
	381: "NIC",
	382: "NIU",
	383: "NOG",
	384: "NON",
	385: "NQO",
	386: "NUB",
	387: "NWC",
	388: "NYM",
	389: "NYN",
	390: "NYO",
	391: "NZI",
	392: "OSA",
	393: "OTA",
	394: "OTO",
	395: "PAA",
	396: "PAG",
	397: "PAL",
	398: "PAM",
	399: "PAP",
	400: "PAU",
	401: "PEO",
	402: "PHI",
	403: "PHN",
	404: "PON",
	405: "PRA",
	406: "PRO",
	407: "RAJ",
	408: "RAP",
	409: "RAR",
	410: "ROA",
	411: "ROM",
	412: "RUP",
	413: "SAD",
	414: "SAH",
	415: "SAI",
	416: "SAL",
	417: "SAM",
	418: "SAS",
	419: "SAT",
	420: "SCN",
	421: "SCO",
	422: "SEL",
	423: "SEM",
	424: "SGA",
	425: "SGN",
	426: "SHN",
	427: "SID",
	428: "SIO",
	429: "SIT",
	430: "SLA",
	431: "SMI",
	432: "SMN",
	433: "SMS",
	434: "SNK",
	435: "SOG",
	436: "SON",
	437: "SRN",
	438: "SRR",
	439: "SSA",
	440: "SUK",
	441: "SUS",
	442: "SUX",
	443: "SYC",
	444: "SYR",
	445: "TAI",
	446: "TEM",
	447: "TER",
	448: "TET",
	449: "TIG",
	450: "TIV",
	451: "TKL",
	452: "TLH",
	453: "TLI",
	454: "TMH",
	455: "TOG",
	456: "TPI",
	457: "TSI",
	458: "TUM",
	459: "TUP",
	460: "TUT",
	461: "TVL",
	462: "TYV",
	463: "UDM",
	464: "UGA",
	465: "UMB",
	466: "VAI",
	467: "VOT",
	468: "WAK",
	469: "WAL",
	470: "WAR",
	471: "WAS",
	472: "WEN",
	473: "XAL",
	474: "YAO",
	475: "YAP",
	476: "YPK",
	477: "ZAP",
	478: "ZBL",
	479: "ZEN",
	480: "ZGH",
	481: "ZND",
	482: "ZUN",
	483: "ZXX",
	484: "ZZA",
}
var Code_value = map[string]int32{
	"UND": 0,
	"NOB": 1,
	"NNO": 2,
	"DAN": 3,
	"SWE": 4,
	"ENG": 5,
	"FRA": 6,
	"SMA": 7,
	"SMJ": 8,
	"SME": 9,
	"ABK": 10,
	"AAR": 11,
	"AFR": 12,
	"AKA": 13,
	"SQI": 14,
	"AMH": 15,
	"ARA": 16,
	"ARG": 17,
	"HYE": 18,
	"ASM": 19,
	"AVA": 20,
	"AVE": 21,
	"AYM": 22,
	"AZE": 23,
	"BAM": 24,
	"BAK": 25,
	"EUS": 26,
	"BEL": 27,
	"BEN": 28,
	"BER": 29,
	"BIS": 30,
	"BOS": 31,
	"BRE": 32,
	"BUL": 33,
	"MYA": 34,
	"CAT": 35,
	"CHA": 36,
	"CHE": 37,
	"NYA": 38,
	"ZHO": 39,
	"CHV": 40,
	"COR": 41,
	"COS": 42,
	"CRE": 43,
	"HRV": 44,
	"CES": 45,
	"PRS": 46,
	"DIV": 47,
	"NLD": 48,
	"DZO": 49,
	"EPO": 50,
	"EST": 51,
	"EWE": 52,
	"FAO": 53,
	"FIJ": 54,
	"FIN": 55,
	"FUL": 56,
	"GLG": 57,
	"KAT": 58,
	"DEU": 59,
	"ELL": 60,
	"GRN": 61,
	"GUJ": 62,
	"HAT": 63,
	"HAU": 64,
	"HEB": 65,
	"HER": 66,
	"HIN": 67,
	"HMO": 68,
	"HUN": 69,
	"INA": 70,
	"IND": 71,
	"ILE": 72,
	"GLE": 73,
	"IBO": 74,
	"IPK": 75,
	"IDO": 76,
	"ISL": 77,
	"ITA": 78,
	"IKU": 79,
	"JPN": 80,
	"JAV": 81,
	"KAL": 82,
	"KAN": 83,
	"KAU": 84,
	"KAS": 85,
	"KAZ": 86,
	"KHM": 87,
	"KIK": 88,
	"KIN": 89,
	"KIR": 90,
	"KOM": 91,
	"KON": 92,
	"KOR": 93,
	"KUR": 94,
	"KUA": 95,
	"LAT": 96,
	"LTZ": 97,
	"LUG": 98,
	"LIM": 99,
	"LIN": 100,
	"LAO": 101,
	"LIT": 102,
	"LUB": 103,
	"LAV": 104,
	"GLV": 105,
	"MKD": 106,
	"MLG": 107,
	"MSA": 108,
	"MAL": 109,
	"MLT": 110,
	"MRI": 111,
	"MAR": 112,
	"MAH": 113,
	"MON": 114,
	"NAU": 115,
	"NAV": 116,
	"NDE": 117,
	"NSO": 118,
	"NEP": 119,
	"NDO": 120,
	"NOR": 121,
	"III": 122,
	"NBL": 123,
	"OCI": 124,
	"OJI": 125,
	"CHU": 126,
	"ORM": 127,
	"ORI": 128,
	"OSS": 129,
	"PAN": 130,
	"PLI": 131,
	"FAS": 132,
	"POL": 133,
	"PUS": 134,
	"POR": 135,
	"QUE": 136,
	"ROH": 137,
	"RUN": 138,
	"RON": 139,
	"RUS": 140,
	"SAN": 141,
	"SRD": 142,
	"SND": 143,
	"SMO": 144,
	"SAG": 145,
	"SRP": 146,
	"GLA": 147,
	"SNA": 148,
	"SIN": 149,
	"SLK": 150,
	"SLV": 151,
	"SOM": 152,
	"SOT": 153,
	"SPA": 154,
	"SUN": 155,
	"SWA": 156,
	"SSW": 157,
	"TAM": 158,
	"TEL": 159,
	"TGK": 160,
	"THA": 161,
	"TIR": 162,
	"BOD": 163,
	"TUK": 164,
	"TGL": 165,
	"FIL": 166,
	"TSN": 167,
	"TON": 168,
	"TUR": 169,
	"TSO": 170,
	"TAT": 171,
	"TWI": 172,
	"TAH": 173,
	"UIG": 174,
	"UKR": 175,
	"URD": 176,
	"UZB": 177,
	"VEN": 178,
	"VIE": 179,
	"VOL": 180,
	"WLN": 181,
	"CYM": 182,
	"WOL": 183,
	"FRY": 184,
	"XHO": 185,
	"YID": 186,
	"YOR": 187,
	"ZHA": 188,
	"ZUL": 189,
	"ACE": 190,
	"ACH": 191,
	"ADA": 192,
	"ADY": 193,
	"AFA": 194,
	"AFH": 195,
	"AIN": 196,
	"AKK": 197,
	"ALE": 198,
	"ALG": 199,
	"ALT": 200,
	"ANG": 201,
	"ANP": 202,
	"APA": 203,
	"ARC": 204,
	"ARN": 205,
	"ARP": 206,
	"ART": 207,
	"ARW": 208,
	"AST": 209,
	"ATH": 210,
	"AUS": 211,
	"AWA": 212,
	"BAD": 213,
	"BAI": 214,
	"BAL": 215,
	"BAN": 216,
	"BAS": 217,
	"BAT": 218,
	"BEJ": 219,
	"BEM": 220,
	"BHO": 221,
	"BIK": 222,
	"BIN": 223,
	"BLA": 224,
	"BNT": 225,
	"BRA": 226,
	"BTK": 227,
	"BUA": 228,
	"BUG": 229,
	"BYN": 230,
	"CAD": 231,
	"CAI": 232,
	"CAR": 233,
	"CAU": 234,
	"CEB": 235,
	"CEL": 236,
	"CHB": 237,
	"CHG": 238,
	"CHK": 239,
	"CHM": 240,
	"CHN": 241,
	"CHO": 242,
	"CHP": 243,
	"CHR": 244,
	"CHY": 245,
	"CMC": 246,
	"COP": 247,
	"CPE": 248,
	"CPF": 249,
	"CPP": 250,
	"CRH": 251,
	"CRP": 252,
	"CSB": 253,
	"CUS": 254,
	"DAK": 255,
	"DAR": 256,
	"DAY": 257,
	"DEL": 258,
	"DEN": 259,
	"DGR": 260,
	"DIN": 261,
	"DOI": 262,
	"DRA": 263,
	"DSB": 264,
	"DUA": 265,
	"DUM": 266,
	"DYU": 267,
	"EFI": 268,
	"EGY": 269,
	"EKA": 270,
	"ELX": 271,
	"ENM": 272,
	"EWO": 273,
	"FAN": 274,
	"FAT": 275,
	"FIU": 276,
	"FON": 277,
	"FRM": 278,
	"FRO": 279,
	"FRR": 280,
	"FRS": 281,
	"FUR": 282,
	"GAA": 283,
	"GAY": 284,
	"GBA": 285,
	"GEM": 286,
	"GEZ": 287,
	"GIL": 288,
	"GMH": 289,
	"GOH": 290,
	"GON": 291,
	"GOR": 292,
	"GOT": 293,
	"GRB": 294,
	"GRC": 295,
	"GSW": 296,
	"GWI": 297,
	"HAI": 298,
	"HAW": 299,
	"HIL": 300,
	"HIM": 301,
	"HIT": 302,
	"HMN": 303,
	"HSB": 304,
	"HUP": 305,
	"IBA": 306,
	"IJO": 307,
	"ILO": 308,
	"INC": 309,
	"INE": 310,
	"INH": 311,
	"IRA": 312,
	"IRO": 313,
	"JBO": 314,
	"JPR": 315,
	"JRB": 316,
	"KAA": 317,
	"KAB": 318,
	"KAC": 319,
	"KAM": 320,
	"KAR": 321,
	"KAW": 322,
	"KBD": 323,
	"KHA": 324,
	"KHI": 325,
	"KHO": 326,
	"KMB": 327,
	"KOK": 328,
	"KOS": 329,
	"KPE": 330,
	"KRC": 331,
	"KRL": 332,
	"KRO": 333,
	"KRU": 334,
	"KUM": 335,
	"KUT": 336,
	"LAD": 337,
	"LAH": 338,
	"LAM": 339,
	"LEZ": 340,
	"LOL": 341,
	"LOZ": 342,
	"LUA": 343,
	"LUI": 344,
	"LUN": 345,
	"LUO": 346,
	"LUS": 347,
	"MAD": 348,
	"MAG": 349,
	"MAI": 350,
	"MAK": 351,
	"MAN": 352,
	"MAP": 353,
	"MAS": 354,
	"MDF": 355,
	"MDR": 356,
	"MEN": 357,
	"MGA": 358,
	"MIC": 359,
	"MIN": 360,
	"MIS": 361,
	"MKH": 362,
	"MNC": 363,
	"MNI": 364,
	"MNO": 365,
	"MOH": 366,
	"MOS": 367,
	"MUL": 368,
	"MUN": 369,
	"MUS": 370,
	"MWL": 371,
	"MWR": 372,
	"MYN": 373,
	"MYV": 374,
	"NAH": 375,
	"NAI": 376,
	"NAP": 377,
	"NDS": 378,
	"NEW": 379,
	"NIA": 380,
	"NIC": 381,
	"NIU": 382,
	"NOG": 383,
	"NON": 384,
	"NQO": 385,
	"NUB": 386,
	"NWC": 387,
	"NYM": 388,
	"NYN": 389,
	"NYO": 390,
	"NZI": 391,
	"OSA": 392,
	"OTA": 393,
	"OTO": 394,
	"PAA": 395,
	"PAG": 396,
	"PAL": 397,
	"PAM": 398,
	"PAP": 399,
	"PAU": 400,
	"PEO": 401,
	"PHI": 402,
	"PHN": 403,
	"PON": 404,
	"PRA": 405,
	"PRO": 406,
	"RAJ": 407,
	"RAP": 408,
	"RAR": 409,
	"ROA": 410,
	"ROM": 411,
	"RUP": 412,
	"SAD": 413,
	"SAH": 414,
	"SAI": 415,
	"SAL": 416,
	"SAM": 417,
	"SAS": 418,
	"SAT": 419,
	"SCN": 420,
	"SCO": 421,
	"SEL": 422,
	"SEM": 423,
	"SGA": 424,
	"SGN": 425,
	"SHN": 426,
	"SID": 427,
	"SIO": 428,
	"SIT": 429,
	"SLA": 430,
	"SMI": 431,
	"SMN": 432,
	"SMS": 433,
	"SNK": 434,
	"SOG": 435,
	"SON": 436,
	"SRN": 437,
	"SRR": 438,
	"SSA": 439,
	"SUK": 440,
	"SUS": 441,
	"SUX": 442,
	"SYC": 443,
	"SYR": 444,
	"TAI": 445,
	"TEM": 446,
	"TER": 447,
	"TET": 448,
	"TIG": 449,
	"TIV": 450,
	"TKL": 451,
	"TLH": 452,
	"TLI": 453,
	"TMH": 454,
	"TOG": 455,
	"TPI": 456,
	"TSI": 457,
	"TUM": 458,
	"TUP": 459,
	"TUT": 460,
	"TVL": 461,
	"TYV": 462,
	"UDM": 463,
	"UGA": 464,
	"UMB": 465,
	"VAI": 466,
	"VOT": 467,
	"WAK": 468,
	"WAL": 469,
	"WAR": 470,
	"WAS": 471,
	"WEN": 472,
	"XAL": 473,
	"YAO": 474,
	"YAP": 475,
	"YPK": 476,
	"ZAP": 477,
	"ZBL": 478,
	"ZEN": 479,
	"ZGH": 480,
	"ZND": 481,
	"ZUN": 482,
	"ZXX": 483,
	"ZZA": 484,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}
func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_maalfrid_2d89b17e2bfcb446, []int{0}
}

// Request message for `Maalfrid.DetectLanguage`
type DetectLanguageRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetectLanguageRequest) Reset()         { *m = DetectLanguageRequest{} }
func (m *DetectLanguageRequest) String() string { return proto.CompactTextString(m) }
func (*DetectLanguageRequest) ProtoMessage()    {}
func (*DetectLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_maalfrid_2d89b17e2bfcb446, []int{0}
}
func (m *DetectLanguageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectLanguageRequest.Unmarshal(m, b)
}
func (m *DetectLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectLanguageRequest.Marshal(b, m, deterministic)
}
func (dst *DetectLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectLanguageRequest.Merge(dst, src)
}
func (m *DetectLanguageRequest) XXX_Size() int {
	return xxx_messageInfo_DetectLanguageRequest.Size(m)
}
func (m *DetectLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DetectLanguageRequest proto.InternalMessageInfo

func (m *DetectLanguageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Reply message for `Maalfrid.DetectLanguage`
type DetectLanguageReply struct {
	Languages            []*Language `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DetectLanguageReply) Reset()         { *m = DetectLanguageReply{} }
func (m *DetectLanguageReply) String() string { return proto.CompactTextString(m) }
func (*DetectLanguageReply) ProtoMessage()    {}
func (*DetectLanguageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_maalfrid_2d89b17e2bfcb446, []int{1}
}
func (m *DetectLanguageReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectLanguageReply.Unmarshal(m, b)
}
func (m *DetectLanguageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectLanguageReply.Marshal(b, m, deterministic)
}
func (dst *DetectLanguageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectLanguageReply.Merge(dst, src)
}
func (m *DetectLanguageReply) XXX_Size() int {
	return xxx_messageInfo_DetectLanguageReply.Size(m)
}
func (m *DetectLanguageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectLanguageReply.DiscardUnknown(m)
}

var xxx_messageInfo_DetectLanguageReply proto.InternalMessageInfo

func (m *DetectLanguageReply) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

type Language struct {
	Code                 Code     `protobuf:"varint,1,opt,name=code,proto3,enum=maalfrid.api.Code" json:"code,omitempty"`
	Count                float64  `protobuf:"fixed64,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Language) Reset()         { *m = Language{} }
func (m *Language) String() string { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()    {}
func (*Language) Descriptor() ([]byte, []int) {
	return fileDescriptor_maalfrid_2d89b17e2bfcb446, []int{2}
}
func (m *Language) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Language.Unmarshal(m, b)
}
func (m *Language) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Language.Marshal(b, m, deterministic)
}
func (dst *Language) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Language.Merge(dst, src)
}
func (m *Language) XXX_Size() int {
	return xxx_messageInfo_Language.Size(m)
}
func (m *Language) XXX_DiscardUnknown() {
	xxx_messageInfo_Language.DiscardUnknown(m)
}

var xxx_messageInfo_Language proto.InternalMessageInfo

func (m *Language) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_UND
}

func (m *Language) GetCount() float64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*DetectLanguageRequest)(nil), "maalfrid.api.DetectLanguageRequest")
	proto.RegisterType((*DetectLanguageReply)(nil), "maalfrid.api.DetectLanguageReply")
	proto.RegisterType((*Language)(nil), "maalfrid.api.Language")
	proto.RegisterEnum("maalfrid.api.Code", Code_name, Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MaalfridClient is the client API for Maalfrid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MaalfridClient interface {
	DetectLanguage(ctx context.Context, in *DetectLanguageRequest, opts ...grpc.CallOption) (*DetectLanguageReply, error)
}

type maalfridClient struct {
	cc *grpc.ClientConn
}

func NewMaalfridClient(cc *grpc.ClientConn) MaalfridClient {
	return &maalfridClient{cc}
}

func (c *maalfridClient) DetectLanguage(ctx context.Context, in *DetectLanguageRequest, opts ...grpc.CallOption) (*DetectLanguageReply, error) {
	out := new(DetectLanguageReply)
	err := c.cc.Invoke(ctx, "/maalfrid.api.Maalfrid/DetectLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaalfridServer is the server API for Maalfrid service.
type MaalfridServer interface {
	DetectLanguage(context.Context, *DetectLanguageRequest) (*DetectLanguageReply, error)
}

func RegisterMaalfridServer(s *grpc.Server, srv MaalfridServer) {
	s.RegisterService(&_Maalfrid_serviceDesc, srv)
}

func _Maalfrid_DetectLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaalfridServer).DetectLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maalfrid.api.Maalfrid/DetectLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaalfridServer).DetectLanguage(ctx, req.(*DetectLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Maalfrid_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maalfrid.api.Maalfrid",
	HandlerType: (*MaalfridServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectLanguage",
			Handler:    _Maalfrid_DetectLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maalfrid.proto",
}

func init() { proto.RegisterFile("maalfrid.proto", fileDescriptor_maalfrid_2d89b17e2bfcb446) }

var fileDescriptor_maalfrid_2d89b17e2bfcb446 = []byte{
	// 2170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd8, 0x77, 0x94, 0x1c, 0xc5,
	0xb5, 0xc7, 0x71, 0xa4, 0x15, 0x20, 0x16, 0x9e, 0xde, 0xf7, 0x2d, 0xe1, 0xc9, 0x38, 0x09, 0x81,
	0xb1, 0x0c, 0xb6, 0x6c, 0x0b, 0x9c, 0x63, 0xcd, 0x4c, 0xef, 0x74, 0xef, 0x74, 0x57, 0xb5, 0xaa,
	0xbb, 0x67, 0x34, 0xe3, 0x28, 0xa4, 0x05, 0xcb, 0x16, 0x48, 0xc0, 0xca, 0x06, 0x47, 0x72, 0xce,
	0x39, 0xe7, 0x9c, 0x73, 0xce, 0x39, 0xe7, 0x9c, 0x73, 0xce, 0x39, 0xe3, 0x33, 0x75, 0xaf, 0xb1,
	0xf1, 0xf1, 0xf1, 0x7f, 0x9f, 0xf9, 0xdd, 0x5b, 0x3d, 0xd5, 0x5d, 0x33, 0x7d, 0xea, 0xd4, 0xe0,
	0xa4, 0x75, 0x67, 0xcf, 0x9e, 0xbf, 0xf6, 0x06, 0xf3, 0xe6, 0x4e, 0x5f, 0xb8, 0xc1, 0x82, 0xb1,
	0x05, 0x43, 0xcb, 0x7c, 0xf2, 0x79, 0xf6, 0xc2, 0x79, 0x53, 0x57, 0x1f, 0x5c, 0xbe, 0x31, 0x3a,
	0x36, 0x3a, 0x67, 0x2c, 0x9d, 0xbd, 0xde, 0x3a, 0x8b, 0x66, 0xaf, 0x33, 0xea, 0x47, 0xd7, 0x5f,
	0x34, 0xba, 0xe1, 0xd8, 0xd0, 0xd0, 0xe0, 0x84, 0xb1, 0xd1, 0x8d, 0xc6, 0x26, 0x8f, 0x9b, 0x32,
	0x6e, 0xda, 0x52, 0x3e, 0x78, 0x6a, 0x6b, 0x70, 0xd9, 0x7f, 0x6f, 0x5e, 0x38, 0x7f, 0xe3, 0xa1,
	0x35, 0x07, 0x97, 0x9a, 0xaf, 0xc1, 0x86, 0x93, 0xc7, 0x4d, 0x19, 0x98, 0xb6, 0xf4, 0x8c, 0x15,
	0xa6, 0xff, 0xeb, 0xb7, 0x4c, 0xff, 0xa4, 0xff, 0x9f, 0x8d, 0x53, 0xe3, 0xc1, 0x89, 0xff, 0x88,
	0x87, 0x56, 0x1d, 0x9c, 0x30, 0x67, 0xc1, 0xdc, 0xd1, 0xf0, 0x65, 0x93, 0x66, 0x0c, 0x7d, 0x7a,
	0x70, 0x7d, 0xc1, 0xdc, 0x51, 0x1f, 0xea, 0x43, 0xcb, 0x0d, 0x2e, 0x3e, 0x67, 0xc1, 0xa2, 0xf5,
	0xc6, 0x26, 0x8f, 0x9f, 0x32, 0x6e, 0xda, 0x38, 0x2f, 0x1f, 0x56, 0x7b, 0x67, 0x95, 0xc1, 0x09,
	0xfd, 0xa6, 0xa1, 0x25, 0x07, 0x07, 0x2a, 0xdb, 0x60, 0xb1, 0x3e, 0xac, 0xab, 0x31, 0x2e, 0xc0,
	0x3a, 0xc6, 0xf7, 0xd1, 0x30, 0x96, 0x81, 0x3e, 0x8a, 0x4e, 0xc4, 0x84, 0x3e, 0x22, 0xdb, 0x64,
	0xf1, 0x3e, 0x86, 0xbd, 0x61, 0x89, 0x50, 0xca, 0x0c, 0x4b, 0x0a, 0x46, 0x98, 0x28, 0x88, 0x58,
	0xaa, 0x0f, 0x53, 0x6b, 0x31, 0x18, 0x60, 0x3c, 0x4b, 0x07, 0x0c, 0x7b, 0x96, 0x09, 0x68, 0x19,
	0xfe, 0x27, 0x34, 0xcf, 0x4c, 0x98, 0x14, 0x92, 0x2c, 0xe6, 0x7f, 0x03, 0xbc, 0x01, 0x41, 0x93,
	0xff, 0xeb, 0x23, 0xee, 0x46, 0x0c, 0x85, 0xa4, 0xc8, 0x58, 0x36, 0xa0, 0x6d, 0x58, 0x4e, 0x10,
	0xb1, 0x7c, 0x40, 0x37, 0x63, 0x85, 0x80, 0x5e, 0xc4, 0xff, 0xf7, 0x51, 0x33, 0x19, 0x93, 0x05,
	0x2d, 0x3e, 0x13, 0x26, 0x5f, 0x15, 0xac, 0x18, 0x92, 0x28, 0xe5, 0xb3, 0x02, 0xcb, 0xe7, 0x04,
	0x9e, 0xcf, 0x07, 0x24, 0x05, 0x5f, 0x08, 0x70, 0x05, 0x5f, 0x0c, 0xf0, 0x11, 0x53, 0x02, 0xaa,
	0x94, 0x95, 0xfa, 0xc8, 0xba, 0x86, 0xa9, 0x7d, 0xd4, 0x4d, 0xc9, 0xca, 0x01, 0xb1, 0x61, 0x15,
	0x41, 0xc4, 0x97, 0xc2, 0x33, 0xec, 0x1a, 0x56, 0xed, 0xa3, 0x17, 0x3b, 0xbe, 0x2c, 0xa5, 0x36,
	0xd3, 0x02, 0x9c, 0xe7, 0x2b, 0x82, 0x82, 0xd5, 0x02, 0x7c, 0xc4, 0xea, 0xe1, 0x4e, 0x7d, 0x9b,
	0xaf, 0x86, 0x24, 0x2a, 0xf8, 0x5a, 0x1f, 0xb9, 0x2f, 0x98, 0x1e, 0xd6, 0x22, 0x69, 0xf3, 0xf5,
	0x70, 0xe5, 0xb4, 0xc1, 0x37, 0x42, 0xd2, 0x73, 0x7c, 0x33, 0xdc, 0x57, 0xee, 0x98, 0x11, 0x50,
	0x94, 0xac, 0x11, 0xd0, 0x89, 0x58, 0x33, 0x2c, 0x93, 0x71, 0x7c, 0x2b, 0x20, 0x19, 0xe1, 0xdb,
	0x02, 0xcb, 0x77, 0x02, 0xaa, 0x94, 0xef, 0xf6, 0xd1, 0x4c, 0x9b, 0x7c, 0xaf, 0x8f, 0x96, 0x29,
	0xf9, 0x7e, 0xb8, 0x72, 0x54, 0xf1, 0x83, 0x70, 0x9d, 0x34, 0xe5, 0x87, 0xa1, 0xc7, 0x5b, 0x7e,
	0x14, 0x50, 0x8d, 0xf0, 0xe3, 0x30, 0x55, 0x53, 0xf2, 0x13, 0x41, 0xc5, 0x4f, 0x03, 0xa2, 0x1a,
	0x46, 0xe0, 0xa9, 0x05, 0x24, 0x96, 0x7a, 0x40, 0xe6, 0x68, 0x04, 0x54, 0x96, 0xa8, 0x8f, 0xc4,
	0x1a, 0x86, 0x05, 0x0d, 0x9a, 0x01, 0x69, 0x44, 0x2c, 0xf3, 0x89, 0x48, 0x42, 0x52, 0x73, 0x8c,
	0x04, 0xe4, 0x2d, 0x5a, 0x01, 0x0d, 0x47, 0x1a, 0x50, 0xa4, 0x64, 0x01, 0xa5, 0xc1, 0x06, 0xb4,
	0x2a, 0x5c, 0x1f, 0x23, 0xb9, 0x25, 0x0f, 0x30, 0x6d, 0x66, 0xca, 0x7d, 0xa5, 0x78, 0x81, 0xa5,
	0x10, 0x54, 0x94, 0x82, 0x82, 0x4a, 0xd0, 0xa3, 0x1d, 0x10, 0x67, 0x74, 0x02, 0x92, 0x16, 0xb3,
	0x04, 0x96, 0xae, 0xc0, 0xd3, 0x0b, 0x70, 0x19, 0x3f, 0x13, 0x58, 0x7e, 0x2e, 0xf0, 0xfc, 0x22,
	0xa0, 0xf2, 0xfc, 0x52, 0x60, 0xf8, 0x55, 0x1f, 0xa9, 0x29, 0xf9, 0x75, 0x40, 0xd9, 0x63, 0x76,
	0x40, 0xd5, 0x64, 0xad, 0x80, 0x24, 0x63, 0x8e, 0xc0, 0x32, 0x57, 0x9a, 0x1d, 0xa3, 0x92, 0x94,
	0xac, 0x2d, 0xcd, 0x35, 0xd6, 0x91, 0x52, 0x9b, 0xdf, 0xc8, 0xf3, 0x69, 0x33, 0x2f, 0xfc, 0x0e,
	0x5b, 0x0d, 0x7e, 0x1b, 0x90, 0x36, 0xf9, 0x5d, 0x40, 0x61, 0x98, 0x1f, 0x60, 0x52, 0xd6, 0x95,
	0x52, 0xc9, 0x7a, 0x01, 0x3e, 0x61, 0x81, 0x94, 0x3c, 0x0b, 0x05, 0x31, 0xeb, 0x07, 0x38, 0xcb,
	0x06, 0xe1, 0xa7, 0x65, 0x2a, 0x36, 0x14, 0xb4, 0x19, 0x0b, 0x68, 0x44, 0x2c, 0x0a, 0x28, 0x1c,
	0xbf, 0x0f, 0x88, 0x72, 0xfe, 0x20, 0x25, 0xc7, 0x46, 0xf2, 0xde, 0xf0, 0x6c, 0x1c, 0x96, 0x20,
	0x49, 0xf8, 0x63, 0x48, 0x6a, 0x29, 0x7f, 0xea, 0xc3, 0xd5, 0x13, 0xfe, 0x1c, 0x30, 0x92, 0xf0,
	0x17, 0xf9, 0x17, 0x54, 0xfc, 0x35, 0x24, 0x3e, 0xe3, 0x6f, 0x43, 0x13, 0xfb, 0x48, 0xd8, 0x64,
	0x5c, 0x50, 0x51, 0xb0, 0x69, 0x50, 0x6e, 0x2c, 0x9b, 0x89, 0xd2, 0x84, 0xcd, 0x83, 0x86, 0x4d,
	0xc1, 0x16, 0x92, 0xb9, 0x94, 0x2d, 0x45, 0x55, 0xc1, 0x56, 0x9a, 0x79, 0xb6, 0x0e, 0x9a, 0x59,
	0x45, 0x6c, 0x13, 0xe4, 0x5d, 0xcc, 0xb6, 0xa2, 0xca, 0xb2, 0x9d, 0x66, 0x96, 0xed, 0x35, 0x2b,
	0xd8, 0x21, 0xa8, 0x30, 0x96, 0x1d, 0x45, 0xbe, 0xc1, 0x4e, 0x22, 0xdb, 0x60, 0x67, 0x51, 0xe6,
	0xd8, 0x45, 0xfb, 0x9a, 0xec, 0xaa, 0x7d, 0x39, 0xbb, 0x05, 0x35, 0x53, 0xc3, 0xee, 0x3a, 0xc2,
	0xb0, 0x87, 0x28, 0xb1, 0xec, 0x29, 0x4a, 0x5b, 0xec, 0xa5, 0x6a, 0xb3, 0xb7, 0xc8, 0x65, 0xec,
	0xa3, 0x2a, 0xd9, 0x57, 0x94, 0x1b, 0xf6, 0x13, 0x55, 0x96, 0xfd, 0x45, 0x1d, 0xc3, 0x01, 0xa2,
	0xa2, 0xc3, 0x81, 0x41, 0xa5, 0xc9, 0x38, 0x48, 0x14, 0xa5, 0x1c, 0x2c, 0x6a, 0xb6, 0x38, 0x44,
	0x14, 0x1b, 0x0e, 0x15, 0x25, 0x9e, 0xc3, 0x82, 0x6a, 0xae, 0xc1, 0xe1, 0x92, 0x55, 0x2d, 0x8e,
	0xd0, 0x11, 0x29, 0x47, 0xca, 0x33, 0x4d, 0x52, 0x8e, 0x92, 0xac, 0xb0, 0x1c, 0x2d, 0x72, 0x96,
	0x63, 0x74, 0x84, 0xe7, 0x58, 0xad, 0x3a, 0x8e, 0xd3, 0x19, 0x94, 0x1c, 0x2f, 0xea, 0x24, 0x9c,
	0xa0, 0x59, 0xcc, 0x89, 0x41, 0x55, 0xd2, 0xe4, 0x24, 0x51, 0xcb, 0x73, 0xb2, 0xc8, 0x37, 0x38,
	0x45, 0xd4, 0xab, 0x71, 0x6a, 0x50, 0x3b, 0xb2, 0x9c, 0x26, 0x4a, 0x22, 0x4e, 0x17, 0xb9, 0x94,
	0x33, 0x82, 0x3a, 0xa9, 0xe5, 0xcc, 0xa0, 0x7a, 0x37, 0xe3, 0x2c, 0xc9, 0x5c, 0xca, 0xd9, 0x32,
	0x67, 0xdf, 0xe5, 0x9c, 0xa0, 0x59, 0xb1, 0xe3, 0xdc, 0xa0, 0x6e, 0xd2, 0xe0, 0x3c, 0x91, 0xf3,
	0x9c, 0x1f, 0xd4, 0x8b, 0x0d, 0x17, 0x88, 0xaa, 0x94, 0x0b, 0x83, 0x4c, 0x3d, 0xe2, 0x22, 0x55,
	0xcc, 0xc5, 0xa2, 0x86, 0xe1, 0x12, 0x55, 0x97, 0x4b, 0x45, 0xc3, 0x86, 0xcb, 0x54, 0x31, 0x97,
	0x8b, 0x12, 0xcb, 0x15, 0xa2, 0x56, 0x8b, 0x2b, 0x45, 0x69, 0xc4, 0x55, 0xaa, 0x26, 0x57, 0xab,
	0x4a, 0xae, 0x11, 0xd9, 0x26, 0xd7, 0xaa, 0x72, 0xae, 0x13, 0xe5, 0x86, 0xeb, 0x45, 0xbe, 0xce,
	0x0d, 0x2a, 0xcb, 0x8d, 0xaa, 0x9c, 0x9b, 0x54, 0x25, 0x37, 0xab, 0x3a, 0xdc, 0x22, 0x2a, 0x4a,
	0x6e, 0x15, 0x95, 0x31, 0xb7, 0x89, 0xaa, 0x82, 0xdb, 0x45, 0x1d, 0xc3, 0x1d, 0xb2, 0xe6, 0xa6,
	0xc1, 0x9d, 0xaa, 0x84, 0xbb, 0x54, 0x29, 0x77, 0xab, 0x2c, 0xf7, 0xa8, 0x0a, 0xee, 0x55, 0x95,
	0xdc, 0x27, 0x8a, 0x46, 0xb8, 0x5f, 0x95, 0xf1, 0x80, 0x28, 0x76, 0x3c, 0x28, 0x4a, 0x5a, 0x3c,
	0xa4, 0xb2, 0x3c, 0x2c, 0x4a, 0x0d, 0x8f, 0x88, 0x6c, 0xc9, 0xa3, 0x22, 0x6f, 0x78, 0x4c, 0x54,
	0xb6, 0x78, 0x5c, 0x54, 0x19, 0x9e, 0x50, 0x35, 0x79, 0x52, 0xd4, 0xb5, 0x3c, 0x25, 0x2b, 0x6d,
	0x1a, 0x3c, 0xad, 0x4a, 0x78, 0x46, 0xe5, 0x79, 0x56, 0x55, 0xf1, 0x9c, 0x28, 0xaa, 0xf1, 0xbc,
	0x2a, 0xe5, 0x05, 0x51, 0x5c, 0xe3, 0x45, 0x55, 0x93, 0x97, 0x54, 0x2d, 0x5e, 0x56, 0x65, 0xbc,
	0xa2, 0xb2, 0xbc, 0xaa, 0x72, 0xbc, 0xa6, 0xca, 0x79, 0x5d, 0xe5, 0x79, 0x43, 0xd5, 0xe5, 0x4d,
	0x51, 0x56, 0xe7, 0x2d, 0x91, 0xcb, 0x79, 0x5b, 0x94, 0x47, 0xbc, 0xa3, 0x1a, 0xe6, 0x5d, 0x55,
	0xce, 0x7b, 0x22, 0x1f, 0xf3, 0xbe, 0x2a, 0xe7, 0x03, 0x51, 0x51, 0xe3, 0x43, 0x51, 0x55, 0xf0,
	0x51, 0x50, 0xc3, 0xb4, 0xf8, 0x58, 0xe5, 0xd9, 0x64, 0xbc, 0xa8, 0xcb, 0xa6, 0xa2, 0x28, 0x65,
	0x33, 0x95, 0x65, 0x73, 0x51, 0xd3, 0xb3, 0x85, 0x28, 0xb1, 0x6c, 0x29, 0x72, 0x09, 0x5b, 0x89,
	0xbc, 0x61, 0x6b, 0x51, 0x51, 0x63, 0x1b, 0x51, 0x65, 0xd8, 0x56, 0x95, 0xb1, 0x9d, 0xa8, 0x5b,
	0xb1, 0x7d, 0x50, 0x34, 0x9c, 0xb0, 0x83, 0xa8, 0xd9, 0x65, 0x47, 0x51, 0xcb, 0xb0, 0x93, 0x28,
	0x9d, 0xc5, 0xce, 0x22, 0x9b, 0xb1, 0x8b, 0xa8, 0xe3, 0xd8, 0x75, 0xbc, 0xbc, 0x8b, 0x2d, 0xbb,
	0xa9, 0x4a, 0x76, 0x17, 0x25, 0x15, 0x7b, 0x88, 0x9c, 0x65, 0x4f, 0x91, 0xcf, 0xd8, 0x4b, 0xe5,
	0xd8, 0x5b, 0xe5, 0xd9, 0x47, 0x55, 0xb0, 0xaf, 0xa8, 0xf2, 0xec, 0x17, 0xd4, 0x34, 0x86, 0xfd,
	0x55, 0x5d, 0x0e, 0x10, 0xd5, 0x0c, 0x07, 0x8a, 0xa2, 0x8c, 0x83, 0x54, 0x3d, 0x0e, 0x16, 0x25,
	0x29, 0x87, 0x88, 0xb2, 0x98, 0x43, 0x45, 0x2e, 0xe6, 0x30, 0x95, 0xe5, 0x70, 0x95, 0xe7, 0x08,
	0x55, 0xc9, 0x91, 0x22, 0x5f, 0xe3, 0x28, 0x55, 0x9d, 0xa3, 0x45, 0x45, 0x87, 0x63, 0x44, 0x9d,
	0x84, 0x63, 0x83, 0x62, 0x93, 0x70, 0x9c, 0xaa, 0xc3, 0xf1, 0xa2, 0x24, 0xe5, 0x04, 0x55, 0xc6,
	0x89, 0xaa, 0x92, 0x93, 0x44, 0x99, 0xe5, 0x64, 0x51, 0x51, 0xe3, 0x14, 0x51, 0x95, 0x73, 0x6a,
	0x50, 0x52, 0x33, 0x9c, 0x26, 0x1a, 0x71, 0x9c, 0x2e, 0x4a, 0x1d, 0x67, 0x88, 0x6c, 0x9d, 0x33,
	0x55, 0x11, 0x67, 0xa9, 0x62, 0xce, 0x16, 0x79, 0xc3, 0x39, 0x2a, 0xc7, 0xb9, 0x41, 0x23, 0x35,
	0xc7, 0x79, 0xa2, 0xdc, 0x73, 0xbe, 0xc8, 0xd7, 0xb8, 0x20, 0xa8, 0x65, 0x0c, 0x17, 0xaa, 0x6a,
	0x5c, 0xa4, 0xaa, 0x73, 0xb1, 0x2a, 0xe3, 0x12, 0x95, 0xe7, 0x52, 0x55, 0x87, 0xcb, 0x44, 0xb5,
	0x06, 0x97, 0x8b, 0x62, 0xc3, 0x15, 0xaa, 0x84, 0x2b, 0x55, 0x8e, 0xab, 0x44, 0x59, 0x8d, 0xab,
	0x45, 0xae, 0xc5, 0x35, 0xaa, 0x82, 0x6b, 0x45, 0x79, 0xc4, 0x75, 0x22, 0x5f, 0xe7, 0x7a, 0x55,
	0xca, 0x0d, 0x2a, 0xc7, 0x8d, 0xaa, 0x8a, 0x9b, 0x44, 0x55, 0xc6, 0xcd, 0xaa, 0x92, 0x5b, 0x82,
	0x52, 0xd3, 0xe0, 0x56, 0x55, 0xcc, 0x6d, 0xaa, 0x8c, 0xdb, 0x45, 0x51, 0x8f, 0x3b, 0x44, 0x2e,
	0xe5, 0x4e, 0x55, 0x8f, 0xbb, 0x44, 0x95, 0xe1, 0x6e, 0x55, 0xc2, 0x3d, 0x2a, 0xcb, 0xbd, 0x2a,
	0xc7, 0x7d, 0xaa, 0x82, 0xfb, 0x83, 0x32, 0xd3, 0xe0, 0x01, 0x55, 0x93, 0x07, 0x55, 0x09, 0x0f,
	0xa9, 0x5a, 0x3c, 0xac, 0xb2, 0x3c, 0xa2, 0xca, 0x79, 0x54, 0x55, 0xf0, 0x98, 0xa8, 0x31, 0xcc,
	0xe3, 0x2a, 0xcf, 0x13, 0xa2, 0xc8, 0xf2, 0xa4, 0xa8, 0x69, 0x78, 0x4a, 0x94, 0xd4, 0x79, 0x5a,
	0x65, 0x79, 0x46, 0x55, 0xf0, 0xac, 0xa8, 0x15, 0xf3, 0x9c, 0xc8, 0xd6, 0x79, 0x5e, 0x95, 0xf0,
	0x82, 0xca, 0xf1, 0xa2, 0xc8, 0xc5, 0xbc, 0xa4, 0x2a, 0x78, 0x59, 0x54, 0xa5, 0xbc, 0xa2, 0xb2,
	0xbc, 0xaa, 0x2a, 0x78, 0x4d, 0xd4, 0x49, 0x79, 0x5d, 0xe5, 0x79, 0x43, 0xd4, 0xb5, 0xbc, 0xa9,
	0x6a, 0xf3, 0x56, 0x90, 0x35, 0x31, 0x6f, 0xab, 0x12, 0xde, 0x51, 0xe5, 0xbc, 0x2b, 0x6a, 0x14,
	0xbc, 0x27, 0x8a, 0x3a, 0xbc, 0x2f, 0x4a, 0x0c, 0x1f, 0xa8, 0xea, 0x7c, 0xa8, 0xaa, 0xf8, 0x48,
	0xe4, 0x9a, 0x7c, 0xac, 0xb2, 0x6c, 0x32, 0x10, 0x34, 0xd3, 0xb1, 0xa9, 0xa8, 0xaa, 0xb1, 0x99,
	0xa8, 0x53, 0x67, 0x73, 0x51, 0x37, 0x63, 0x0b, 0x95, 0x65, 0x4b, 0x95, 0x63, 0x2b, 0x51, 0x2f,
	0x61, 0xeb, 0x01, 0xd9, 0x45, 0x1a, 0xb6, 0x11, 0x95, 0x86, 0x6d, 0x55, 0x8e, 0xed, 0x06, 0x64,
	0x67, 0x69, 0xd8, 0x5e, 0xd5, 0x64, 0x07, 0x55, 0xca, 0x8e, 0xaa, 0x8c, 0x9d, 0x54, 0x39, 0x3b,
	0xab, 0x2a, 0x76, 0x11, 0x45, 0x8e, 0x5d, 0x45, 0x71, 0xc2, 0x6e, 0x2a, 0xcb, 0xee, 0x22, 0x67,
	0xd9, 0x43, 0xe4, 0x0d, 0x7b, 0xaa, 0x1c, 0x7b, 0x05, 0x79, 0x33, 0xc2, 0xde, 0xaa, 0x9c, 0x7d,
	0x54, 0x9e, 0x7d, 0x45, 0xce, 0xb0, 0x9f, 0x2a, 0x63, 0x7f, 0x51, 0x95, 0x73, 0xc0, 0x80, 0xec,
	0x3b, 0x1b, 0x1c, 0xa8, 0x8a, 0x39, 0x48, 0x95, 0x70, 0xb0, 0x2a, 0xe5, 0x10, 0x55, 0xc6, 0xa1,
	0xaa, 0x82, 0xc3, 0x54, 0x25, 0x87, 0x8b, 0xea, 0x96, 0x23, 0x54, 0x8e, 0x23, 0x45, 0x51, 0xca,
	0x51, 0xaa, 0x8c, 0xa3, 0x45, 0x4d, 0xc3, 0x31, 0x2a, 0xcb, 0xb1, 0xa2, 0xd8, 0x72, 0x9c, 0x28,
	0x69, 0x70, 0xbc, 0xca, 0x71, 0x82, 0xaa, 0xe4, 0x44, 0x51, 0x6a, 0x38, 0x49, 0x94, 0x25, 0x9c,
	0xac, 0xb2, 0x9c, 0xa2, 0x2a, 0x38, 0x55, 0x64, 0x5b, 0x9c, 0x26, 0x72, 0x4d, 0x4e, 0x57, 0x59,
	0xce, 0x10, 0x79, 0xcb, 0x99, 0x2a, 0xcf, 0x59, 0xa2, 0xc2, 0x70, 0xb6, 0xa8, 0x6a, 0x71, 0x8e,
	0xaa, 0xe0, 0x5c, 0xd5, 0x2c, 0xce, 0x13, 0x75, 0xeb, 0x9c, 0xaf, 0xf2, 0x5c, 0x30, 0x20, 0xfb,
	0xd3, 0x84, 0x0b, 0x45, 0x51, 0xc6, 0x45, 0x2a, 0xcf, 0xc5, 0xaa, 0x92, 0x4b, 0x44, 0x49, 0x93,
	0x4b, 0x55, 0x6d, 0x2e, 0x13, 0xb5, 0x52, 0x2e, 0x17, 0xa5, 0x31, 0x57, 0xa8, 0x12, 0xae, 0x14,
	0x65, 0x31, 0x57, 0x89, 0x5c, 0x93, 0xab, 0x45, 0x79, 0xc2, 0x35, 0xa2, 0x22, 0xe1, 0x5a, 0x51,
	0x95, 0x71, 0x9d, 0x2a, 0xe7, 0x7a, 0x55, 0xc9, 0x0d, 0xa2, 0x76, 0xca, 0x8d, 0xa2, 0x6e, 0x9b,
	0x9b, 0x82, 0xaa, 0x46, 0xc6, 0xcd, 0xa2, 0xa6, 0xe1, 0x16, 0x51, 0x56, 0xe3, 0xd6, 0xa0, 0xb6,
	0x49, 0xb8, 0x4d, 0xe4, 0x4a, 0x6e, 0x0f, 0xea, 0x98, 0x16, 0x77, 0xa8, 0x52, 0xee, 0x54, 0x79,
	0xee, 0x52, 0x15, 0xdc, 0x2d, 0x8a, 0x2c, 0xf7, 0x04, 0xcd, 0x32, 0x29, 0xf7, 0x06, 0x75, 0x8d,
	0xe3, 0x3e, 0x55, 0xce, 0xfd, 0xa2, 0xbc, 0xc5, 0x03, 0x41, 0x3d, 0x93, 0xf3, 0xa0, 0xa8, 0x96,
	0xf2, 0x90, 0x28, 0xb2, 0x3c, 0x2c, 0x6a, 0xc6, 0x3c, 0x22, 0xb2, 0x0d, 0x1e, 0x15, 0x55, 0x96,
	0xc7, 0x44, 0xb3, 0x66, 0xf1, 0xb8, 0xa8, 0x67, 0x78, 0x62, 0x60, 0xc6, 0xda, 0x83, 0x13, 0x33,
	0x3d, 0xab, 0x1a, 0xea, 0x0d, 0x4e, 0xfa, 0xf4, 0xe9, 0xd8, 0xd0, 0xca, 0x9f, 0x3e, 0xc8, 0xfa,
	0x8f, 0x07, 0x6d, 0x2b, 0xae, 0xf4, 0xdf, 0x9b, 0x16, 0xce, 0xdf, 0x78, 0xea, 0x62, 0xb5, 0xc5,
	0x7b, 0x03, 0xb3, 0x17, 0xce, 0x5b, 0x6b, 0x89, 0x70, 0x84, 0xb7, 0xc6, 0xdf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x12, 0x34, 0xf1, 0xe7, 0xd4, 0x13, 0x00, 0x00,
}
